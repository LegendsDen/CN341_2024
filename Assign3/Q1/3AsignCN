// Rinnegan
#include<bits/stdc++.h>
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#pragma GCC optimization("unroll-loops")
using namespace std;
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds; 
 #define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update>
//order_of_key (k) : Number of items strictly smaller than k 
//find_by_order(k) : K-th element in a set (counting from zero)
typedef long long ll;
#define vi vector <ll>
#define pa pair<ll,ll>
#define pb push_back
#define Bits __builtin_popcountll
#define rev(x) reverse (x.begin(),x.end());
#define print1(x,n) for(int i=1;i<=n;i++) cout<<x[i]<<" "; cout<<endl;
#define inpu(x,n) for(int i=0;i<n;i++) cin>>x[i]
#define inpu1(x,n) for(int i=1;i<=n;i++) cin>>x[i]
#define endl "\n"
ll zero=0;
#define na cout<<"NO"<<endl;
#define ya cout<<"YES"<<endl;
#define so(x) sort (x.begin(),x.end());
#define sob(x) sort (x.rbegin(),x.rend());
#define sz(x) static_cast<int>((x).size())
const ll inf=1e18+5;
const ll mod=1e9+7;
const ll N=2e5+5;


const ll A=1e9+42;
const ll B=1e9+69;
#ifndef ONLINE_JUDGE
#define debug(x) cerr<<#x<<"--->"; _print(x);cerr<<endl;
#else
#define debug(x)
#endif

void _print(int t) {cerr << t;}
void _print(ll t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(double t) {cerr << t;}

template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T> void _print(vector <T> v);
template <class T>void _print(vector <vector<T>> v) { cerr << "(\n"; for (vector<T> i : v) {cerr << "  ";  _print(i); cerr << "\n";}cerr << ")";}
template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> istream &operator>>(istream &in, vector<T> &v) {for (auto &elem : v) { in >> elem;}return in;}


bool bySecond(pair<ll,ll>&a,pair<ll,ll>&b){
   return a.first>b.first;
}
ll binexp(ll a,ll n,ll m){
   ll ans=1;
   while(n){
      if(n&1)ans=(ans*a)%m;
      a=(a*a)%m;
      n>>=1;
   }
   return ans;
}
////////////////////////////////////////Fenwick Algorithm////////////////////////////////////////////////////////////////////////
ll bit[N];											//O(logN)
void Update(int i,int x,ll n ){
   for(int j=i;j<=n;j+=(j&(-j))){ // increment ith element by +x
      bit[j]+=x;
   }
}
int Sum(int i){ //gives sum from index 1 to i of array
   int ans=0;
   for(int j=i;j>0;j-=(j&(-j))){
      ans+=bit[j];
   }
   return ans;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////Seive Algorithm//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vector<bool>Prime(N,1);						//O(Nlog(logN))
vector<ll>lp(N),hp(N);
vector<ll> prime_factors;
vector<ll>divisors[N];

void Primes(){ 
   Prime[0]=Prime[1]=false;
   for(int i=2;i<N;i++){
      if(Prime[i]==true){
         lp[i]=hp[i]=i;
         for(int j=2*i;j<N;j+=i){
            Prime[j]=false;
            hp[j]=i;
            if(lp[j]==0) lp[j]=i;
         }
      }
   }
}
   //for(int i=2;i<N;i++){									//O(NlogN)
      //for(int j=i;j<N;j+=i){
         //divisors[j].pb(i);
      //}
   //}
// divisors  and prime factors of  a single no can be done in root N time
   //ll num;
   //while(num>1){												//O(logN)
      //ll prime_factor=hp[num];
      //while(num%prime_factor==0){
         //num/=prime_factor;
         //prime_factors.pb(prime_factor);
      //}
   //}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////SEGMENT TREE///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

vector<ll>trees;
vector<ll>lazy;


ll seg(ll node,ll low,ll high,ll s,ll e){
   if(s<=low&&high<=e) {
      return trees[node];
   }
   if(high<s||e<low){
      return 0;
   }
   ll mid=(low+high)/2;
   return seg(2*node,low,mid,s,e)+
      seg(2*node+1,mid+1,high,s,e);
}


//update recursive;
void update(ll node,ll low,ll high,ll s,ll e,ll v){
   if(s<=low&&high<=e) {
       //i m a leaf
      trees[node]=v;
      return ;
   }
   if(high<s||e<low){
      return ;
   }
   ll mid=(low+high)/2;
   update(2*node,low,mid,s,e,v);// go to left child
   update(2*node+1,mid+1,high,s,e,v);// go to right child
   trees[node]=trees[2*node]+trees[2*node+1]; //now those values known,so changes at parent node
}


void rangeUpdates(ll node,ll low,ll high,ll s ,ll e,ll val){
   if(lazy[node]!=0){
      trees[node]+=(high-low+1)*lazy[node];
      if(low!=high){
         lazy[2*node]+=lazy[node];
         lazy[2*node+1]+=lazy[node];
      }
      lazy[node]=0;
   }
   if(e<low||s>high||low>high) return;
   if(low>=s&&high<=e){
      trees[node]+=(high-low+1)*val;
      if(low!=high){
         lazy[2*node]+=val;
         lazy[2*node+1]+=val;
      }
      return;
   }
   ll mid=(high+low)>>1;
   rangeUpdates(2*node,low,mid,s,e,val);
   rangeUpdates(2*node+1,mid+1,high,s,e,val);
   trees[node]=trees[2*node]+trees[2*node+1];
}


ll lazySum(ll node,ll low,ll high,ll s,ll e){
   if(lazy[node]!=0){
      trees[node]+=(high-low+1)*lazy[node];
      if(low!=high){
         lazy[2*node]+=lazy[node];
         lazy[2*node+1]+=lazy[node];
      }
      lazy[node]=0;
   }
   if(e<low||s>high||low>high) return 0;
   if(low>=s&&high<=e) return trees[node];
   ll mid=(low+high)>>1;
   return lazySum(2*node,low,mid,s,e)+
      lazySum(2*node+1,mid+1,high,s,e);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////// Hashing///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void hashes(string s,vi  &pref,vi&a,vi&suffix){
   a[0]=1;
   pref[0]=s[0];
   ll n=s.length();
   suffix[n-1]=s[n-1];
   for(int i=1;i<n;i++){
      pref[i]=(pref[i-1]*A+s[i]) %B;
      suffix[n-i-1]=(suffix[n-i]*A+s[n-i-1])%B;
      a[i]=(a[i-1]*A)%B;
   }
}
ll hash_val(ll i ,ll j,vi &pref, vi&a){
   if(i==0) return pref[j];
   else return ((pref[j]-pref[i-1]*a[j-i+1])%B+B)%B;
}
ll hash_val2(ll i,ll j,vi &suffix,vi &a,ll n){
   if(j==n-1) return suffix[i];
   else return ((suffix[i]-suffix[j+1]*a[j-i+1])%B+B)%B;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



vector<pair<ll,ll>> movements={
   {1,0},{0,1},{0,-1},{-1,0}
};
bool isValid(ll x,ll y, ll n){
return x>=1&&y>=1&&x<=n&&y<=n;
}
vector<ll>g[N];
bool vis[N];
ll previ[N];
ll level[N];

void bfs(ll source){
   queue<ll>q;
   q.push(source);
   vis[source]=1;
   while(!q.empty()){
      ll current=q.front();
      q.pop();
      for(ll child:g[current]) 
         if(!vis[child]){
            q.push(child);
            vis[child]=1;
            level[child]=level[current]+1;
            previ[child]=current;
         }
   }
}
void dfs(ll vertex){
   vis[vertex]=true;

   for(auto &child:g[vertex]){
      if(!vis[child]){
         dfs(child);
      }
   }
}


#define print(x) for(auto &a:x) cout<<a<<" ";  cout<<endl;
#define reset(x,y) for(int i=1;i<=y;i++) x[i]=0;
#define clr(x,y) for(int i=1;i<=y;i++)  x[i].clear();
////////////////////////////////////////////////SOLVE//////////////////////////////////////////////////////////////////////////

void solve(){
   














}


signed main(){
// memset(dp, -1, sizeof(dp));
//cout<<fixed<<showpoint<<setprecision(10);
   ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
   #ifndef ONLINE_JUDGE
   freopen("input.txt","r",stdin);
   freopen("output.txt","w",stdout);
   freopen("error.txt","w",stderr);
   #endif

   ll test=1;
   //cin>>test;
   while(test--){
       solve();
   }
   return 0;
//BinarySearch
//Dp
// check if N is same of question
// can think of solution in tree from bottom up with each subtree
// can think of solutions from back!
}